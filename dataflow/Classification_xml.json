{
	"name": "Classification_xml",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_xml",
						"type": "DatasetReference"
					},
					"name": "Classificationxml"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_DB",
						"type": "DatasetReference"
					},
					"name": "Classifications"
				}
			],
			"transformations": [
				{
					"name": "flattenxmlattributes"
				}
			],
			"scriptLines": [
				"source(output(",
				"          eDRIIntegration as (eDRIMessage as (AdditionalFields as (Field as ({@name} as string, {_value_} as string)[]), AuditID as short, DataSourceCreateDateTime as string, DataSourceNamePK as boolean, DataSourceValuePK as string, EDRIMessageID as integer, NumberOfRegistryDestinations as short, Patient as (AdditionalFields as (Field as ({@name} as string, {_value_} as integer)[]), Address as (Addressline1 as string, Addressline2 as string, City as string, CountryCode as string, County as short, State as string, Zipcode as short), Address_Formatted as (Addressline1_Formatted as string, Addressline2_Formatted as string, City_Formatted as string, State_Formatted as string, Zipcode_Formatted as short), Contacts as string, Demographic as (AgeRaw as string, BirthDate as date, Ethnicity as ({@Unknown} as string, Hispanic as string, {Non-Hispanic} as boolean), EthnicityRaw as boolean, Gender as string, Name as (AKAFirstName as string, AKALastName as string, AKAMiddleName as string, Alias as string, FirstName as string, LastName as string, MiddleName as string, Suffix as string), Name_Formatted as (FirstName_Formatted as string, LastName_Formatted as string, MiddleName_Formatted as string, Suffix_Formatted as string), Race as (Asian as string, Black as string, NativeAmerican as string, OtherRace as string, PacificIslander as string, Unknown as string, White as string), RaceRaw as string), Email as string, ID as (AccountNum as string, DriversLicenseNum as string, Medicaid as string, MedicalRecordNumber as ({@Unknown} as string, {_value_} as short), MedicareNumber as string, PatientIDAlt as long, PatientIDExternal as string, PatientIDInternal as string, SSN as string, SSNRaw as string), ListOfEDRIExternalIDs as (ExternalID as string), PatientIndicators as (AdmissionDate as string, AdmitToHospital as string, CountryOfOrigin as string, DeathDate as string, DeathIndicator as string, DischargeDate as string, DueDate as string, HomelessIndicator as string, Language as string, LengthOfResidency as string, MaritalStatusCode as string, MothersID as string, PregnantIndicator as string, TypeOfInsurance as string, USBornIndicator as string), Phone as (CellPhone as string, Extension as string, HomePhone as ({@Unknown} as string, {_value_} as long), OtherPhone as string, WorkCellPhone as string, WorkPhone as string), WorkEmail as string), Reporter as (AdditionalFields as string, Demographic as (Name as (FirstName as string, LastName as string), Title as string), Email as string, NPI as string, Phone as (Extension as string, WorkPhone as string)), RequestBlock as (AdditionalFields as (Field as ({@name} as string, {_value_} as string)[]), HealthCareFacility as (AdditionalFields as (Field as ({@name} as string)), Address as (Addressline1 as string, Addressline2 as string, City as string, CountryCode as string, County as string, State as string, Zipcode as string), Address_Formatted as (Addressline1_Formatted as string, Addressline2_Formatted as string, City_Formatted as string, State_Formatted as string, Zipcode_Formatted as string), Email as string, HealthCareFacilityCode as string, HealthCareFacilityIDAlt as string, HealthCareFacilityIDInternal as string, HealthCareFacilityName as string, HealthCareFacilityName_Formatted as string, NPI as string, Phone as (Extension as string, HomePhone as string, OtherPhone as string, WorkPhone as string)), Laboratory as ({@Unknown} as string, {@labNotFoundInList} as string, {@labNotPerf} as string, AdditionalFields as string, Address as (Addressline1 as string, Addressline2 as string, City as string, CountryCode as string, County as string, State as string, Zipcode as string), Address_Formatted as (Addressline1_Formatted as string, Addressline2_Formatted as string, City_Formatted as string, State_Formatted as string, Zipcode_Formatted as string), LaboratoryCLIA as string, LaboratoryName as string, LaboratoryPFI as string, Phone as (Extension as string, HomePhone as string, OtherPhone as string, WorkPhone as string)), Provider as (AdditionalFields as string, Address as (Addressline1 as string, Addressline2 as string, City as string, CountryCode as string, County as string, State as string, Zipcode as short), Address_Formatted as (Addressline1_Formatted as string, Addressline2_Formatted as string, City_Formatted as string, State_Formatted as string, Zipcode_Formatted as short), Demographic as (Name as ({@Unknown} as string, FirstName as string, LastName as string, MiddleName as string, Suffix as string), Name_Formatted as (FirstName_Formatted as string, LastName_Formatted as string, MiddleName_Formatted as string, Suffix_Formatted as string)), Email as string, NPI as string, Phone as (Extension as string, HomePhone as ({@Unknown} as string), OtherPhone as string, WorkPhone as integer), ProviderID as integer), ResultBlock as ({@Classified} as boolean, {@DoNotDeliver} as boolean, DiseaseCode as short, DiseaseCodeRaw as string, DiseaseGroup as short, DiseaseName as ({@ClassificationRule} as string, {_value_} as string), DiseasePK as short, ListOfRegistryDestinations as (Destination as string[]), NYSProgramCode as string, ReportableDiseaseOrCondition as (Field as ({@name} as string, {_value_} as string)[]))[])[], SIMPLSplitID as integer, SIMPLTransactionID as integer, SenderIDInternal as string, TypeOfTransactionPK as boolean))",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true) ~> Classificationxml",
				"Classificationxml foldDown(unrollMultiple(eDRIIntegration.eDRIMessage.AdditionalFields.Field,eDRIIntegration.eDRIMessage.Patient.AdditionalFields.Field,eDRIIntegration.eDRIMessage.RequestBlock,eDRIIntegration.eDRIMessage.RequestBlock.AdditionalFields.Field,eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock,eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.ListOfRegistryDestinations.Destination,eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.ReportableDiseaseOrCondition.Field),",
				"     mapColumn(",
				"          Name = eDRIIntegration.eDRIMessage.AdditionalFields.Field.{@name},",
				"          AuditID = eDRIIntegration.eDRIMessage.AuditID,",
				"          DataSourceCreateDateTime = eDRIIntegration.eDRIMessage.DataSourceCreateDateTime,",
				"          DataSourceNamePK = eDRIIntegration.eDRIMessage.DataSourceNamePK,",
				"          DataSourceValuePK = eDRIIntegration.eDRIMessage.DataSourceValuePK,",
				"          EDRIMessageID = eDRIIntegration.eDRIMessage.EDRIMessageID,",
				"          NumberOfRegistryDestinations = eDRIIntegration.eDRIMessage.NumberOfRegistryDestinations,",
				"          Patient = eDRIIntegration.eDRIMessage.Patient,",
				"          Reporter = eDRIIntegration.eDRIMessage.Reporter,",
				"          AdditionalFields = eDRIIntegration.eDRIMessage.RequestBlock.AdditionalFields,",
				"          HealthCareFacility = eDRIIntegration.eDRIMessage.RequestBlock.HealthCareFacility,",
				"          Laboratory = eDRIIntegration.eDRIMessage.RequestBlock.Laboratory,",
				"          Provider = eDRIIntegration.eDRIMessage.RequestBlock.Provider,",
				"          {@Classified} = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.{@Classified},",
				"          {@DoNotDeliver} = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.{@DoNotDeliver},",
				"          DiseaseCode = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.DiseaseCode,",
				"          DiseaseCodeRaw = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.DiseaseCodeRaw,",
				"          DiseaseGroup = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.DiseaseGroup,",
				"          DiseaseName = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.DiseaseName,",
				"          DiseasePK = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.DiseasePK,",
				"          ListOfRegistryDestinations = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.ListOfRegistryDestinations,",
				"          NYSProgramCode = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.NYSProgramCode,",
				"          {@name} = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.ReportableDiseaseOrCondition.Field.{@name},",
				"          {_value_} = eDRIIntegration.eDRIMessage.RequestBlock.ResultBlock.ReportableDiseaseOrCondition.Field.{_value_},",
				"          SIMPLSplitID = eDRIIntegration.eDRIMessage.SIMPLSplitID,",
				"          SIMPLTransactionID = eDRIIntegration.eDRIMessage.SIMPLTransactionID,",
				"          SenderIDInternal = eDRIIntegration.eDRIMessage.SenderIDInternal,",
				"          TypeOfTransactionPK = eDRIIntegration.eDRIMessage.TypeOfTransactionPK",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenxmlattributes",
				"flattenxmlattributes sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Classifications"
			]
		}
	}
}