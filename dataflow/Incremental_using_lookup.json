{
	"name": "Incremental_using_lookup",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_DB",
						"type": "DatasetReference"
					},
					"name": "BooksStage"
				},
				{
					"dataset": {
						"referenceName": "ds_Azure_SQL_DB_DIM",
						"type": "DatasetReference"
					},
					"name": "BooksDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Azure_SQL_DB_DIM",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_Azure_SQL_DB_DIM",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "lookupDim"
				},
				{
					"name": "split1"
				},
				{
					"name": "select1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Bookid as string,",
				"          author as string,",
				"          description as string,",
				"          genre as string,",
				"          price as double,",
				"          publish_date as date,",
				"          title as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> BooksStage",
				"source(output(",
				"          Surrogate_key as integer,",
				"          Bookid as string,",
				"          author as string,",
				"          description as string,",
				"          genre as string,",
				"          price as double,",
				"          publish_date as date,",
				"          title as string,",
				"          lastdatemodified as date,",
				"          hashcolumn as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> BooksDim",
				"BooksStage derive(Hashcolumn = toBinary(md5(author+genre+title)),",
				"          lastdatemodified = currentDate()) ~> derivedColumn1",
				"select1, BooksDim lookup(stg_Bookid == Bookid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDim",
				"lookupDim split(isNull(Bookid),",
				"     !isNull(Bookid) && notEquals(derived_Hashcolumn, hashcolumn),",
				"     disjoint: false) ~> split1@(Newrecords, updaterecords, Nochange)",
				"derivedColumn1 select(mapColumn(",
				"          stg_Bookid = Bookid,",
				"          stg_author = author,",
				"          stg_description = description,",
				"          stg_genre = genre,",
				"          stg_price = price,",
				"          stg_publish_date = publish_date,",
				"          stg_title = title,",
				"          derived_Hashcolumn = Hashcolumn,",
				"          derived_lastdatemodified = lastdatemodified",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"split1@updaterecords alterRow(updateIf(true())) ~> alterRow1",
				"split1@Newrecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Bookid = stg_Bookid,",
				"          author = stg_author,",
				"          description = stg_description,",
				"          genre = stg_genre,",
				"          price = stg_price,",
				"          publish_date = stg_publish_date,",
				"          title = stg_title,",
				"          derived_Hashcolumn,",
				"          derived_lastdatemodified,",
				"          Surrogate_key",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Bookid'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Bookid = stg_Bookid,",
				"          author = stg_author,",
				"          description = stg_description,",
				"          genre = stg_genre,",
				"          price = stg_price,",
				"          publish_date = stg_publish_date,",
				"          title = stg_title,",
				"          Hashcolumn = derived_Hashcolumn,",
				"          lastdatemodified = derived_lastdatemodified",
				"     )) ~> sink2"
			]
		}
	}
}