{
	"name": "Test_Child_Inserts_Updates",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_xml_bookdataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_Azure_SQl_DB_Books",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Azure_SQL_DB_Language",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          catalog as (book as ({@id} as string, author as string, description as string, genre as string, languages as (language as string[]), price as double, publish_date as date, title as string)[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true) ~> source1",
				"source(output(",
				"          ID as integer,",
				"          author as string,",
				"          description as string,",
				"          genre as string,",
				"          price as double,",
				"          publish_date as date,",
				"          title as string,",
				"          BookId as string,",
				"          hashcolumn as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 foldDown(unrollMultiple(catalog.book,catalog.book.languages.language),",
				"     mapColumn(",
				"          src_BookId = catalog.book.{@id},",
				"          src_author = catalog.book.author,",
				"          src_description = catalog.book.description,",
				"          src_genre = catalog.book.genre,",
				"          src_language = catalog.book.languages.language,",
				"          src_price = catalog.book.price,",
				"          src_publish_date = catalog.book.publish_date,",
				"          src_title = catalog.book.title",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1, source2 lookup(src_BookId == BookId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          src_language,",
				"          ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LanguageID as integer,",
				"          fk_BookId as integer,",
				"          LanguageName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BookID = ID,",
				"          LanguageName = src_language",
				"     )) ~> sink1"
			]
		}
	}
}