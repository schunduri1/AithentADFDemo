{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-Aithent-Conversion-test"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage_Processed_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_Processed'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"ls_AzureBlob_raw_customers_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureBlob_raw_customers'"
		},
		"ls_AzureSQLDB_Customers_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSQLDB_Customers'"
		},
		"ls_AzureSQLDB_sink_Customers_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_AzureSQLDB_sink_Customers'"
		},
		"ls_AzureSqlDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_AzureSqlDatabase'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqldatabase-edri.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SampleDB"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"ls_AzureSQLDB_sink_Customers_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqldatabase-edri.database.windows.net"
		},
		"ls_AzureSQLDB_sink_Customers_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SampleDB"
		},
		"ls_AzureSQLDB_sink_Customers_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"ls_AzureSqlDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqldatabase-edri.database.windows.net"
		},
		"ls_AzureSqlDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SampleDB"
		},
		"ls_AzureSqlDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Customer1Table": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AzureSQLDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSQLDB_Customers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Surrogate_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customerid",
						"type": "varchar"
					},
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "company",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "phone",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "varchar"
					},
					{
						"name": "subscription_date",
						"type": "date"
					},
					{
						"name": "website",
						"type": "varchar"
					},
					{
						"name": "IsActive",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customers1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSQLDB_Customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AzureSQLDB_sink_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureBlob_raw_customers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers-100.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Customer Id",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "Company",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Phone 1",
						"type": "String"
					},
					{
						"name": "Phone 2",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Subscription Date",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlob_raw_customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_Processed')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_Processed_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"hostNameInCertificate": "",
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureBlob_raw_customers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureBlob_raw_customers_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSQLDB_Customers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSQLDB_Customers_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSQLDB_sink_Customers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_AzureSQLDB_sink_Customers_properties_typeProperties_server')]",
					"database": "[parameters('ls_AzureSQLDB_sink_Customers_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"hostNameInCertificate": "",
					"authenticationType": "SQL",
					"userName": "[parameters('ls_AzureSQLDB_sink_Customers_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_AzureSQLDB_sink_Customers_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_AzureSqlDatabase_properties_typeProperties_server')]",
					"database": "[parameters('ls_AzureSqlDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"hostNameInCertificate": "",
					"authenticationType": "SQL",
					"userName": "[parameters('ls_AzureSqlDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_AzureSqlDatabase_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "Customer1Table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSQLDB",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "AddingIsActive",
							"description": "Creating/updating the columns ' Customer Id, First Name, Last Name, Company, City, Country, Phone 1, Phone 2, Email, Subscription Date, Website, IsActive'"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookupsink"
						},
						{
							"name": "filterexistingrows"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedcolupdateIsActive"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          {Customer Id} as string,",
						"          {First Name} as string,",
						"          {Last Name} as string,",
						"          Company as string,",
						"          City as string,",
						"          Country as string,",
						"          {Phone 1} as string,",
						"          {Phone 2} as string,",
						"          Email as string,",
						"          {Subscription Date} as string,",
						"          Website as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customers",
						"source(output(",
						"          Surrogate_key as integer,",
						"          index as string,",
						"          customerid as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          company as string,",
						"          city as string,",
						"          country as string,",
						"          phone1 as string,",
						"          phone2 as string,",
						"          email as string,",
						"          subscription_date as string,",
						"          website as string,",
						"          IsActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customer1Table",
						"Customers derive(IsActive = 1) ~> AddingIsActive",
						"Customer1Table select(mapColumn(",
						"          SQL_Surrogate_key = Surrogate_key,",
						"          SQL_index = index,",
						"          SQL_customerid = customerid,",
						"          SQL_first_name = first_name,",
						"          SQL_last_name = last_name,",
						"          SQL_company = company,",
						"          SQL_city = city,",
						"          SQL_country = country,",
						"          SQL_phone1 = phone1,",
						"          SQL_phone2 = phone2,",
						"          SQL_email = email,",
						"          SQL_subscription_date = subscription_date,",
						"          SQL_website = website,",
						"          SQL_IsActive = IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Customers, select1 lookup({Customer Id} == SQL_customerid,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupsink",
						"lookupsink filter(!isNull(SQL_customerid)) ~> filterexistingrows",
						"filterexistingrows select(mapColumn(",
						"          SQL_Surrogate_key,",
						"          SQL_index,",
						"          SQL_customerid,",
						"          SQL_first_name,",
						"          SQL_last_name,",
						"          SQL_company,",
						"          SQL_city,",
						"          SQL_country,",
						"          SQL_phone1,",
						"          SQL_phone2,",
						"          SQL_email,",
						"          SQL_subscription_date,",
						"          SQL_website,",
						"          SQL_IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(SQL_IsActive = 0) ~> derivedcolupdateIsActive",
						"derivedcolupdateIsActive alterRow(updateIf(1==1)) ~> alterRow1",
						"AddingIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surrogate_key as integer,",
						"          customerid as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          company as string,",
						"          city as string,",
						"          country as string,",
						"          phone as string,",
						"          email as string,",
						"          subscription_date as date,",
						"          website as string,",
						"          IsActive as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customerid = {Customer Id},",
						"          first_name = {First Name},",
						"          last_name = {Last Name},",
						"          company = Company,",
						"          city = City,",
						"          country = Country,",
						"          phone = {Phone 1},",
						"          email = Email,",
						"          website = Website,",
						"          IsActive",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surrogate_key as integer,",
						"          customerid as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          company as string,",
						"          city as string,",
						"          country as string,",
						"          phone as string,",
						"          email as string,",
						"          subscription_date as date,",
						"          website as string,",
						"          IsActive as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Surrogate_key','customerid','first_name','last_name','city','country'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Surrogate_key = SQL_Surrogate_key,",
						"          customerid = SQL_customerid,",
						"          first_name = SQL_first_name,",
						"          last_name = SQL_last_name,",
						"          company = SQL_company,",
						"          city = SQL_city,",
						"          country = SQL_country,",
						"          phone = SQL_phone1,",
						"          email = SQL_email,",
						"          subscription_date = SQL_subscription_date,",
						"          website = SQL_website,",
						"          IsActive = SQL_IsActive",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Customers')]",
				"[concat(variables('factoryId'), '/datasets/DS_AzureSQLDB')]"
			]
		}
	]
}